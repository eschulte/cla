#!/usr/local/bin/guile \
--no-auto-compile -s
!#
(use-modules (ice-9 rdelim)
             (ice-9 format)
             (srfi srfi-1))

(define (reduce fn l)
  (if (null? l) '() (fn (car l) (reduce fn (cdr l)))))

(define (counts lst)
  (reduce (lambda (el acc)
            (let ((prev (assoc el acc)))
              (if prev
                  (assoc-set! acc el (+ 1 (cdr prev)))
                  (cons (cons el 1) acc))))
          lst))

(define (majority lst)
  (caar (sort (counts lst) (lambda (a b) (> (cdr a) (cdr b))))))

(define (best-attribute xs ys)
  '())

(define (leaf-node? ys)
  '())

(define (build-leaf-node ys)
  '())

(define (build-decision-node xs ys)
  (let ((a (best-attribute xs ys)))
    `(case ,a
       ,@(map (lambda (pair)
                (list a (apply build-decision-tree pair)))
              (split-by-attribute xs ys)))))

(define (build-decision-tree xs ys)
  (if (leaf-node? ys)
      (build-leaf-node ys)
      (build-decision-node xs ys)))

;; parse incoming data
(define *data* (read))
(define *xs* (map (lambda (line) (reverse (cdr (reverse line)))) *data*))
(define *ys* (map last-pair *data*))

(format #t "~d attributes in ~a~%" (length (car *xs*)) (car *xs*))


