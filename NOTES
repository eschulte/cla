# -*- mode:org -*-
#+Title: Command Line Analysis (CLA)
#+Author: Eric Schulte

* Design Diagram
:   Shell        CLA Frontend            Modules
:  -------      --------------          ---------
:                                      +----------+
:                                  /---|          |
:                                  |   +----------+
:             +----------------+   |   +----------+
:             |  Dispatch to   |   +---|          |
:  STDIN ---->|    modules     |-->|   +----------+
:             +----------------+   |   +----------+
:                                  +---|          |
:             +----------------+   |   +----------+
: STDOUT <----|  Collect and   |<--|   +----------+
:             | present output |   +---|          |
:             +----------------+   |   +----------+
:                                  |   +----------+
:                                  \---|          |
:                                      +----------+

* Notes and Tasks [2/4]
** TODO fix up the sine test script
so doesn't give weird results

** DONE module interaction
The module interaction should be simple and done through Unix pipes.
- data may be presented to modules STDIN
- data may be collected from modules STDOUT

So far this is working using named pipes made with =mkfifo=.  The only
problem with these pipes is that I'm not sure how to incrementally
read from such a pipe without the read termination subsequently
killing the writing process on the other end.

** TODO how best to print the data
probably want to have two modes

1. incremental output of the results to the terminal using a library
   which is able to overwrite lines, thinking the format could allow
   one vertical segment (normally one line wide) to each module in
   which the incremental output is written. e.g.,
   :     min: x.xx
   :     max: x.xx
   :    mean: x.xx
   :   stdev: x.xx
   : pearson: x.xx
   :    poly: x + xX^x

2. final output to be performed after all data has been processed to
   print the final results of each module.  This will be simpler to
   implement and shouldn't contain any control characters for simpler
   parsing by subsequent command line tools.

** Sine (example input data)
#+name: sine
#+begin_src sh
  for x in `seq 400`;do echo "s($x/100)"|bc -l; done
#+end_src

** Outputting updated progress on the same line
Using shell escape codes.
#+begin_src sh
  for i in `seq 20`;do
      echo -n " $i\r"
      sleep 1
  done
#+end_src
** DONE =tee= is almost enough by itself
: ./sine|tee >(../modules/mean|./line-buffer /tmp/mean) >(../modules/sum|./line-buffer /tmp/sum) >/dev/null

Using something like the above with =eval= should reduce the on-disk
footprint letting =tee= duplicate the input across all processes.
* Additional modules to implement [0/2]
** TODO Mann-Whitney U-test
[[http://scholar.google.com/scholar?as_q=&as_epq=A+practical+guide+for+using+statistical+tests+to+assess+randomized+algorithms+in+software+engineering&as_oq=&as_eq=&as_occt=title&as_sauthors=&as_publication=&as_ylo=&as_yhi=&btnG=&hl=en&as_sdt=0%2C32][A practical guide for using statistical tests to assess randomized algorithms in software engineering]]

** TODO Fisher's Exact test
[[http://scholar.google.com/scholar?as_q=&as_epq=A+practical+guide+for+using+statistical+tests+to+assess+randomized+algorithms+in+software+engineering&as_oq=&as_eq=&as_occt=title&as_sauthors=&as_publication=&as_ylo=&as_yhi=&btnG=&hl=en&as_sdt=0%2C32][A practical guide for using statistical tests to assess randomized algorithms in software engineering]]
